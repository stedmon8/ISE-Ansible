---
- hosts: ISE
  vars_files:
    - secrets.yml
    - networkingdevices.yml
    - adgroups.yml
    - nad_groups.yml
  gather_facts: no

  tasks:
    - name: Get All Network Device Groups (id/name/description)
      cisco.ise.network_device_group_info:
        ise_hostname: "{{ inventory_hostname }}"
        ise_username: "{{ ise_username }}"
        ise_password: "{{ ise_password }}"
        ise_verify: "{{ ise_verify }}"
      register: device_groups

    - name: List Network Device Groups by Name (YAML)
      ansible.builtin.shell: 'echo "{{ device_groups.ise_response
      | community.general.json_query(query) 
      | to_nice_yaml(indent=2) }}" > /dev/tty'
      delegate_to: localhost
      changed_when: false
      vars:
        query: "[*].name"
    # - name: Debug output
    #   ansible.builtin.debug:
    #     var: device_groups

    - name: Create NAD Group
      cisco.ise.network_device_group:
        ise_hostname: "{{ise_hostname}}"
        ise_username: "{{ise_username}}"
        ise_password: "{{ise_password}}"
        ise_verify: "{{ise_verify}}"
        state: present
        description: "{{item.name}}"
        name: "Device Type#All Device Types#{{item.name}}"
        othername: Device Type
      # when: configured is defined and configured == 1
      loop: "{{ nadgroups }}"
      ignore_errors: True
     
    
    - name: "Network Device: {{ item.device_name }}"
      cisco.ise.network_device:
        ise_hostname: "{{ inventory_hostname }}"
        ise_username: "{{ ise_username }}"
        ise_password: "{{ ise_password }}"
        ise_verify: "{{ ise_verify }}"
        state: present
        name: "{{ item.device_name }}"
        description: "{{ item.device_name }}"
        profileName: "{{ item.profile_name | default(profile_name) }}"
        NetworkDeviceIPList:
        - ipaddress: "{{ item.ipv4 }}"
          mask: 32
        NetworkDeviceGroupList: "{{ item.network_device_groups }}"
        authenticationSettings:
          networkProtocol: RADIUS
          radiusSharedSecret: "{{ item.radius_secret | default(radius_secret) }}"
          enableKeyWrap: False
          dtlsRequired: False
          enableMultiSecret: False
        dtlsDnsName: "{{ item.device_name }}"
        coaPort: 0
        trustsecsettings:
          deviceAuthenticationSettings:
            sgaDeviceId: "c3650-1"
            sgaDevicePassword: "12345678"
          deviceConfigurationDeployment:
            enableModePassword: "{{ ise_password }}"
            execModePassword: "{{ ise_password }}"
            execModeUsername: "stbates"
            includeWhenDeployingSGTUpdates: true
          pushIdSupport: true
          sgaNotificationAndUpdates:
            coaSourceHost: 'ise2.stbates.com'
            downlaodEnvironmentDataEveryXSeconds: 86400
            downlaodPeerAuthorizationPolicyEveryXSeconds: 86400
            downloadSGACLListsEveryXSeconds: 86400
            otherSGADevicesToTrustThisDevice: true
            reAuthenticationEveryXSeconds: 86400
            sendConfigurationToDevice: true
            sendConfigurationToDeviceUsing: "ENABLE_USING_COA"
      loop: "{{ networkdevices }}"
      when: configured is defined and configured == 1

    - name: "Get Network Device by Name: {{ item.device_name }}"
      cisco.ise.network_device_info:
        ise_hostname: "{{ inventory_hostname }}"
        ise_username: "{{ ise_username }}"
        ise_password: "{{ ise_password }}"
        ise_verify: "{{ ise_verify }}"
        name: "{{ item.device_name }}"
      register: output
      loop: "{{ networkdevices }}"


    - name: Debug output
      ansible.builtin.debug:
        var: output
    
    
    - name: Creat join point for AD
      ansible.builtin.uri:
        url: "https://10.1.17.245:9060/ers/config/activedirectory"
        method: POST
        url_username: "{{ ise_username }}"
        url_password: "{{ ise_password }}"
        force_basic_auth: yes
        headers:
          Accept: application/json
          Content-Type: application/json
        body: '{ "ERSActiveDirectory":  {"name" : "stbates", "description" : "Group of Active company users", "domain" : "stbates.com"}}'
        status_code: 200, 201
        validate_certs: no
        return_content: true
      register: response
      delegate_to: localhost
      when: configured is defined and configured == 1

    - name: Get All Join points
      ansible.builtin.uri:
        url: "https://10.1.17.245:9060/ers/config/activedirectory"
        method: GET
        url_username: "{{ ise_username }}"
        url_password: "{{ ise_password }}"
        force_basic_auth: yes
        headers:
          Accept: application/json
          Content-Type: application/json
        status_code: 200, 201
        validate_certs: no
        return_content: true
      register: response
      delegate_to: localhost

    - name: Get Ad ID from json repsonse above and put into variable ad_id
      ansible.builtin.debug:
        msg: "{{response.json.SearchResult.resources[0].id }}"
      delegate_to: localhost

    - set_fact: ISE_AD_ID="{{ response.json.SearchResult.resources[0].id }}"

    - name: Get 
      debug:
       msg: "{{ ISE_AD_ID }}"
    

    - name: Add ISE to AD
      cisco.ise.active_directory_join_domain:
        ise_hostname: "{{ise_hostname}}"
        ise_username: "{{ise_username}}"
        ise_password: "{{ise_password}}"
        ise_verify: "{{ise_verify}}"
        additionalData:
        - name: "username"
          value: "administrator"
        - name: "password"
          value: "C!sco12345"
        - name: "node"
          value: "ise2.stbates.com"
        id: "{{ ISE_AD_ID }}"
      ignore_errors: True
      
    - name: Add AD Groups
      cisco.ise.active_directory_add_groups:
          ise_hostname: "{{ise_hostname}}"
          ise_username: "{{ise_username}}"
          ise_password: "{{ise_password}}"
          ise_verify: "{{ise_verify}}"
          domain: "stbates.com"
          id: "{{ ISE_AD_ID }}"
          name: "stbates"
          adgroups:
            groups:
            - name: "{{ item.group_name }}"
              sid: "{{ item.sid }}"
              type: "{{ item.type }}"
      loop: "{{ adgroups }}"
